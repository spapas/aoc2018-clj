;(require '[aoc2018.day12 :as day12 :refer :all] :reload-all)


(ns aoc2018.day12
  (:require [aoc2018.common :as co]
            [clojure.string :as str]
            [clojure.set :as set]))

(defn get-digits [s]
  (map #(if (= %1 \.) 0 1) s))

(def initial-str "###....#..#..#......####.#..##..#..###......##.##..#...#.##.###.##.###.....#.###..#.#.##.#..#.#")
(def initial-str1 "#..#.#..##......###...###")

(def initial (map-indexed #(vec [%1 %2]) (get-digits initial-str)))
(def rules-str "..### => #
..... => .
..#.. => .
.###. => .
...## => #
#.### => .
#.#.# => #
##..# => .
##.## => #
#...# => .
..##. => .
##.#. => .
...#. => .
#..#. => #
.#### => #
.#..# => #
##... => #
.##.# => .
....# => .
#.... => .
.#.#. => #
.##.. => .
###.# => #
####. => .
##### => #
#.##. => #
.#... => #
.#.## => #
###.. => #
#..## => .
#.#.. => #
..#.# => .")

(def rules-str0 "...## => #
..#.. => #
.#... => #
.#.#. => #
.#.## => #
.##.. => #
.#### => #
#.#.# => #
#.### => #
##.#. => #
##.## => #
###.. => #
###.# => #
####. => #")

(def pows {0 1 1 2 2 4 3 8 4 16})
(defn pow2 [z] (get pows z))

(defn s-to-n [s]
  (reduce +
          (map-indexed (fn [idx itm] (* itm (pow2 idx))) (reverse (get-digits s)))))

(def rules
  (as-> rules-str zz

    (str/split zz #"\n")
    (filter #(str/ends-with? % "#") zz)
    (map #(str/split %1 #" => ") zz)
    (map #(vec [(s-to-n (first %)) (if (= "." (second %)) 0 1)]) zz)))

(def rules-dict (into {} rules))

(defn lpad [st]
  (let [fidx (first (first st))
        f (second (first st))
        s (second (second st))]
    (cond
      (= f 1) (into [[(- fidx 2) 0] [(dec fidx) 0]] st)
      (= s 1) (into [[(dec fidx) 0]] st)
      :else st)))

(defn rpad [st]
  (let [rst (reverse st)
        fidx (first (first rst))
        f (second (first rst))
        s (second (second rst))]
    (cond
      (= f 1) (conj (conj st [(inc fidx) 0]) [(+ fidx 2) 0])
      (= s 1) (conj st [(inc fidx) 0])
      :else st)))

(defn lpad-always [st]
  (let [fidx (first (first st))]
    (into [[(- fidx 4) 0] [(- fidx 3) 0] [(- fidx 2) 0] [(dec fidx) 0]] st)))

(defn rpad-always [st]
  (let [lidx (first (last st))]
    (reverse (into [[(+ lidx 4) 0] [(+ lidx 3) 0] [(+ lidx 2) 0] [(inc lidx) 0]] (reverse st)))))


(defn l-to-n [l]
  (reduce +
          (map-indexed
           (fn [idx itm] (* (second itm) (pow2 idx)))
           (reverse l))))

(defn d [s z]
  (print s)
  (println z)
  z)

(defn show-state [st]
  (->> st sort (map #(second %)) (map #(if (= % 0) "." "#" )) str/join )
  )

(defn next-state [st]
  (let [pst (rpad-always (lpad-always st))
        idx (map first pst)]
    (->> (partition 5 1 pst)
         
         
         (map l-to-n)
         (map #(get rules-dict % 0))
         ; (d "1: ")
         (map #(vector (+ %1 2) %2) idx)
         (into [])
         (rpad)
         (lpad)
         )))

(defn next-state2 [st]
  )


(defn looper [st t]
  (if (zero? t)
    st
    (recur (next-state st) (dec t))))


(defn calc-value [st]
  (->> st
       (filter #(-> % second zero? not))
       (map first)
       (reduce +)))

(def part1 
  (calc-value (looper initial 20)))


; 10000000006779 too high
; 10000000006777  too high
; 1700000000011
(def part2
  (+ (* (- 50000000000 200) 34) (calc-value (looper initial 200))))



"
2296
2249	-47
2148	-101
2341	193
2102	-239
2203	101
2384	181
2403	19
2477	74
2506	29
2399	-107
2212	-187
2279	67
2678	399
2318	-360
2224	-94
2250	26
2477	227
2297	-180
2040	-257
2288	248
2188	-100
2072	-116
2230	158
2288	58
2419	131
2476	57
2353	-123
2715	362
2688	-27
2569	-119
2597	28
2626	29
2620	-6
2457	-163
2611	154
2766	155
2731	-35
2548	-183
2651	103
2536	-115
2905	369
3062	157
2839	-223
2205	-634
2528	323
2674	146
2646	-28
2605	-41
2894	289
2795	-99
2513	-282
2152	-361
2108	-44
2422	314
2566	144
2463	-103
2581	118
2801	220
2748	-53
3023	275
2867	-156
2895	28
2772	-123
2613	-159
2770	157
2783	13
2990	207
3078	88
3090	12
3196	106
3058	-138
2896	-162
2888	-8
2919	31
3082	163
3321	239
3329	8
3493	164
3321	-172
3163	-158
3326	163
3258	-68
3428	170
3340	-88
3531	191
3210	-321
3400	190
3451	51
3396	-55
3490	94
3777	287
3794	17
4236	442
4023	-213
3406	-617
3607	201
3805	198
3844	39
3489	-355
3515	26
3072	-443
3176	104
3292	116
3314	22
3507	193
3805	298
3925	120
3943	18
3956	13
4343	387
4273	-70
4283	10
4303	20
4535	232
4294	-241
4225	-69
4329	104
4721	392
4740	19
4684	-56
4806	122
4918	112
4785	-133
4437	-348
4554	117
4388	-166
4396	8
4707	311
4926	219
4875	-51
5095	220
5311	216
5629	318
5135	-494
4959	-176
4769	-190
4811	42
4654	-157
4682	28
4980	298
5296	316
5310	14
5354	44
5483	129
5386	-97
5418	32
5639	221
5412	-227
5345	-67
5581	236
5704	123
5420	-284
5546	126
5694	148
5620	-74
5753	133
5872	119
5995	123
5642	-353
5962	320
6195	233
5727	-468
5865	138
5893	28
6233	340
6458	225
6167	-291
6103	-64
6153	50
6288	135
6301	13
6237	-64
6271	34
6203	-68
6436	233
6573	137
6617	44
6547	-70
6371	-176
6406	35
6213	-193
6445	232
6576	131
6707	131
6644	-63
6679	35
6813	134
6732	-81
6767	35
6505	-262
6539	34
6573	34
6607	34
6641	34
6675	34
6709	34
6743	34
6777	34
6811	34
6845	34
6879	34
6913	34
6947	34
6981	34
7015	34
7049	34
7083	34
7117	34
7151	34
7185	34
7219	34
7253	34
7287	34
7321	34
7355	34
7389	34
7423	34
7457	34
7491	34
7525	34
7559	34
7593	34
7627	34
7661	34
7695	34
7729	34
7763	34
7797	34
7831	34
7865	34
7899	34
7933	34
7967	34
8001	34
8035	34
8069	34
8103	34
8137	34
8171	34
8205	34
8239	34
8273	34
8307	34
8341	34
8375	34
8409	34
8443	34
8477	34
8511	34
8545	34
8579	34
8613	34
8647	34
8681	34
8715	34
8749	34
8783	34
8817	34
8851	34
8885	34
8919	34
8953	34
8987	34
9021	34
9055	34
9089	34
9123	34
9157	34
9191	34
9225	34
9259	34
9293	34
9327	34
9361	34
9395	34
9429	34
9463	34
9497	34
9531	34
9565	34
9599	34
9633	34
9667	34
9701	34
9735	34
9769	34
9803	34
9837	34
9871	34
9905	34
9939	34
9973	34
10007	34
10041	34
10075	34
10109	34
10143	34
10177	34
"